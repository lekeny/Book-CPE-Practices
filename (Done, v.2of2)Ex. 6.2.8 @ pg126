/* Ex. 6.2.8 @ pg126 */
/* Version 2, improved after looking at textbook's sample solution and make improvements out of it. */

/* Completely Working! */

#include <iostream>
#include <vector>
#include <strstream>

int repeatAmount, matrixDimension;

int symmetricMatrixChecker(); //Returns 1 if matrix is symmetric, and returns 0 if it is non-symmetric.

int main(void)
{

	std::vector<int> output;
	int currentMatrixCase = 0;

	std::cin >> repeatAmount;
	output.resize(repeatAmount);

	while (repeatAmount--)
	{
		if (symmetricMatrixChecker() == 1)
		{
			output.at(currentMatrixCase) = 1;
			currentMatrixCase++;
		}
		else
		{
			output.at(currentMatrixCase) = 0;
			currentMatrixCase++;
		}

	}

	for (int i = 0; i < currentMatrixCase; i++)
	{
		if (output.at(i) == 1)
		{
			std::cout << "Test #" << i + 1 << ": Symmetric.\n";
		}
		else
			std::cout << "Test #" << i + 1 << ": Non-symmetric.\n";
	}


	return 0;
}

int symmetricMatrixChecker()
{
	int isSymmetric = 1;

	while (!(std::cin >> matrixDimension))
	{
		std::cin.clear();
		std::cin.ignore();
	}

	std::vector<std::vector<signed long long int>> matrix;
	matrix.resize(matrixDimension);

	for (int i = 0; i < matrix.size(); i++)
	{
		matrix[i].resize(matrixDimension);
	}

	for (int i = 0; i < matrix.size(); i++)
	{
		for (int k = 0; k < matrix.size(); k++)
		{
			std::cin >> matrix[i][k];
			if (matrix[i][k] < 0)
			{
				isSymmetric = 0;
			}
		}
	}

	if (isSymmetric == 0)
	{
		return 0;
	}

	for (int i = 0; i < matrix.size(); i++)
	{
		for (int k = 0; k < matrix.size(); k++)
		{
			if (matrix[i][k] != matrix[matrixDimension - 1 - i][matrixDimension - 1 - k])
			{
				return 0;
			}
		}
	}

	return 1;
}
